<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zookeeper on Matrix</title>
    <link>https://xsymphony.github.io/tags/Zookeeper/</link>
    <description>Recent content in Zookeeper on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Wed, 27 Feb 2019 15:00:16 +0800</lastBuildDate>
    
	<atom:link href="https://xsymphony.github.io/tags/Zookeeper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漫谈分布式锁（三）</title>
      <link>https://xsymphony.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</link>
      <pubDate>Wed, 27 Feb 2019 15:00:16 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</guid>
      <description>在上一节中，我们利用Redis实现了分布式互斥锁。虽然相较于基于MySQL的解决方案，它已经解决了很多问题，但是仍然有一些不足（不讨论RedLock解放方案）: 非高可用，一旦Redis服务挂了，极大影响锁的使用。 没有正确估计锁的过期时间pexpire时，很容易造成，业务逻辑处理时</description>
    </item>
    
  </channel>
</rss>