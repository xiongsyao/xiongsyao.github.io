<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zookeeper on Matrix</title>
    <link>https://xiongsyao.github.io/tags/Zookeeper/</link>
    <description>Recent content in Zookeeper on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Wed, 27 Feb 2019 15:00:16 +0800</lastBuildDate>
    
	<atom:link href="https://xiongsyao.github.io/tags/Zookeeper/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漫谈分布式锁（三）</title>
      <link>https://xiongsyao.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</link>
      <pubDate>Wed, 27 Feb 2019 15:00:16 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</guid>
      <description>在上一节中，我们利用Redis实现了分布式互斥锁。虽然相较于基于MySQL的解决方案，它已经解决了很多问题，但是仍然有一些不足（不讨论RedLock解放方案）:
 非高可用，一旦Redis服务挂了，极大影响锁的使用。 没有正确估计锁的过期时间pexpire时，很容易造成，业务逻辑处理时间过长，导致频繁产生解锁失败的错误。若设置过长，会影响获取锁的效率。 持有锁的工作线程出错后，必须等待过期时间结束才能释放锁，并不能立即释放。 阻塞锁的实现方式需要通过while循环实现。  在这一节中，我们通过Zookeeper实现分布式互斥锁。
优势 Zookeeper作为一个分布式应用协调程序，常用来做配置管理、服务发现。它的所有写入动作会在Leader节点持久化，并在集群过半数节点写入成功才会返回，它也能够支持节点的崩溃恢复以及客户端的最终一致性视图。得益于这一特性，基于zk实现的分布式锁，只要节点数大于等于三，就是天然高可用的。
zk的这些特性可以用于分布式锁中:
 永久节点: 节点创建之后，不会因为会话失效而消失，需要主动删除。用来作为锁的根节点。
 临时节点: 临时节点将在当前客户端与服务端建立的session到期时自动删除，这个特性可以保障客户端创建的分布式锁节点在客户端宕机或者网络通讯中断一段时间后自动释放该临时节点，从而避免分布式锁由于客户端或网络原因导致的死锁问题。
 顺序节点: 顺序节点将自动在客户端指定的节点名后面添加一个单调递增序号来确保多个客户端同时创建相同的节点名时能够创建成功，并且保障越早创建的节点的序号越小。利用该特性可以实现锁的互斥性和公平性，即同一时刻只有一个客户端能够成功获取到锁（序号最小的一个获取到锁），获取锁失败的节点可以按照创建顺序进行锁等待。
 监视器（watcher）: 当创建一个节点时，当前客户端可以注册一个该节点的监视器，当节点状态改变（删除或更新）时，zk将会向此客户端发送一条通知。应用watcher机制，正在等待锁的客户端就可以及时得知锁被释放，进行抢占锁的动作。
  实现思路  创建锁目录lock。 希望获得锁的客户端在lock目录下创建临时顺序节点。 获取锁目录下所有子节点，拿到最小子节点，并判断最小子节点是不是与自身的节点相同，若是，则获取锁。否则，监听比自己次小的节点(这里不是监听最小节点，为了防止“羊群效应”)，当比自己次小的节点被删除时，重复此步骤知道获取锁。 客户端处理完业务，删除自己的节点，释放锁。  具体实现 因为Zookeeper常用于作为分布式锁，所有很多语言的Zookeeper包都为我们内置了lock。以python为例:
import time from kazoo.client import KazooClient zk = KazooClient(&amp;quot;127.0.0.1:2181&amp;quot;) zk.start() lock = zk.Lock(&amp;quot;/lockpath&amp;quot;, &amp;quot;my-identifier&amp;quot;) with lock: # blocks waiting for lock acquisition # do something with the lock time.sleep(5)  kazoo还为我们提供了除互斥锁外更多种类的锁，可以看官方文档了解下。</description>
    </item>
    
  </channel>
</rss>