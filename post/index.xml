<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Matrix</title>
    <link>https://xiongsyao.github.io/post/</link>
    <description>Recent content in Posts on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Wed, 02 Jan 2019 17:20:16 +0800</lastBuildDate>
    
	<atom:link href="https://xiongsyao.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>解读redis协议</title>
      <link>https://xiongsyao.github.io/post/2019/01/02/%E8%A7%A3%E8%AF%BBredis%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 02 Jan 2019 17:20:16 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2019/01/02/%E8%A7%A3%E8%AF%BBredis%E5%8D%8F%E8%AE%AE/</guid>
      <description>前言 Redis作为我们日常使用的key-value数据库，不光操作简单(例如set get delete等指令)，通信协议也简洁明了。 本篇就会剖析Redis的通信协议，并且实现一个简单的Redis客户端。
协议 Redis服务端与客户端使用的基于TCP的文本协议(敲黑板，这里并没有使用效率更高的二进制协议)，称之为RESP(Redis Serialization Protocol)。区别于同样是文本协议的HTTP协议，RESP尤为简洁，其基础规则很容易理解。
请求信息 假如我们执行set test ok这样的命令，可以视为准备了一个[&amp;quot;set&amp;quot;, &amp;quot;test&amp;quot;, &amp;quot;ok&amp;quot;]这样的数组，随即将其序列化为字符串，序列化规则如下:
 首先以每一个指令以*开头指明数组长度 以$开头指明下个元素的字符长度 每一个元素以间隔符号\r\n(CRLF)隔开  按这个规则,set test ok则为:
*3\r\n $3\r\n set\r\n $4\r\n test\r\n $2\r\n ok\r\n  以python为例:
import redis r = redis.Redis() r.set(&#39;hello&#39;, &#39;world&#39;)  那么将发送的指令为*3\r\n$3\r\nset\r\n$5\r\nhello\r\n$5\r\nworld\r\n，收到的响应为+OK\r\n。
响应信息 RESP协议中，不同类型的响应信息，会以不同的字符开头，比如上例中，+OK\r\n就以+开头。 + 简单字符串(Simple Strings)响应会以&amp;rdquo;+&amp;ldquo;开头 &amp;gt; +OK\r\n + 错误(Errors)响应会以&amp;rdquo;-&amp;ldquo;开头 &amp;gt; -ERR unkown command &amp;lsquo;ST&amp;rsquo;\r\n + 数字(Integer)响应会以&amp;rdquo;:&amp;ldquo;开头 &amp;gt; :2\r\n + 大字符串(Bulk Strings)会以&amp;rdquo;$&amp;ldquo;开头，并且随之标出字符串字节数 &amp;gt; $13\r\nHello, World!\r\n + 数组类型(Arrays)类似与请求信息的序列化一致（在HGETALLLRANGEMGET命令中会返回)。
实例 接下来，我们将用go实现一个简单的redis客户端</description>
    </item>
    
    <item>
      <title>谈谈golang中的锁</title>
      <link>https://xiongsyao.github.io/post/2018/12/28/%E8%B0%88%E8%B0%88golang%E4%B8%AD%E7%9A%84%E9%94%81/</link>
      <pubDate>Fri, 28 Dec 2018 15:26:58 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/12/28/%E8%B0%88%E8%B0%88golang%E4%B8%AD%E7%9A%84%E9%94%81/</guid>
      <description>得益于go的goroutine，go的并发变得十分容易，只需要go关键字，就可以启动一个新的协程。 例如一下程序:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func do() { time.Sleep(1 * time.Second) count++ } var count int // 10秒后会看到打印出10 func main() { for i := 0; i &amp;lt; 10; i++ { do() } fmt.Println(count) }  在以上例子中，我们对count执行累加操作，这个例子，可以用go关键字并发操作do,如下:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) var count int var wg sync.WaitGroup func do() { time.Sleep(1 * time.Second) count++ // 通知协程执行完毕 wg.Done() } // 1秒后打印出10（不保证一定为0) func main() { n := 10 for i := 0; i &amp;lt; n; i++ { // 记录新增一个协程 wg.</description>
    </item>
    
    <item>
      <title>[LeetCode]150:逆波兰表达式求值</title>
      <link>https://xiongsyao.github.io/post/2018/12/17/LeetCode150%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</link>
      <pubDate>Wed, 19 Dec 2018 15:08:08 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/12/17/LeetCode150%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</guid>
      <description>本章代码: 这里
 思路 leetcode第150题： 根据逆波兰表示法，求表达式的值。(题目具体信息文章顶部的链接代码里有)
这是一道运用栈来求解的题。
通过分析题目意思，我们很容易想出这样的做法：
 遍历字符，每当遇到非操作符(即数字)时，我们将此数字入栈。 当遇到操作符时(即+ - * /), 我们将栈顶的两个元素出栈，并按顺序与操作符执行运算，例如，当前操作符为/，出栈元素为依次为n2, n1, 则n3 = n2 / n1,并将计算结果n3入栈。 当遍历完输入后，栈中只剩一个最终的元素，此元素极为表达式最终的结果。  代码 Go func evalRPN(tokens []string) int { operations := map[string]func(int, int) int{ &amp;quot;+&amp;quot;: func(number1, number2 int) int {return number1+number2}, &amp;quot;-&amp;quot;: func(number1, number2 int) int {return number1-number2}, &amp;quot;*&amp;quot;: func(number1, number2 int) int {return number1*number2}, &amp;quot;/&amp;quot;: func(number1, number2 int) int {return int(number1/number2)}, } stack := []int{} for _, token := range tokens { if operationfunc, had := operations[token]; had { length := len(stack) number1, number2 := stack[length-2], stack[length-1] stack = stack[:length-2] number := operationfunc(number1, number2) stack = append(stack, number) } else { number, _ := strconv.</description>
    </item>
    
    <item>
      <title>动态加载Django的config配置</title>
      <link>https://xiongsyao.github.io/post/2018/03/7/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDjango%E7%9A%84config%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 07 Mar 2018 14:29:58 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/03/7/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDDjango%E7%9A%84config%E9%85%8D%E7%BD%AE/</guid>
      <description>github本章代码: 点这里
 前言 之前想新开的一个坑，目标是从0开始写一个CMS框架，将要实现的功能应该有：
 媒体库 导航栏配置 富文本页 文章及评论 自定义模版样式(换肤) 可视化编辑 &amp;hellip;  但是发现传统的单config.py文件记录配置信息，不方便在开发环境和生产环境中来回切换。
这里，提出一种方式，依据环境变量，自动加载当前模式下的配置
开始 在开始项目前，我们需要了解下开发的基本情况
 项目基于python3.6，django 2.0 一些配置会使用到环境变量，一些帐号密码之类的配置，采用环境变量来设置是极为合理的（尤其是对于开源项目），如何设置环境变量？  windows: set KEY=VALUE Linux or Mac OS: export KEY=VALUE   项目配置 django 的startproject命令创建的项目，结构不太合理，因为开发中与实际上线，会有一些配置上的差异，所以我们修改settings.py文件为config文件夹，来加载开发配置与生产配置。
以开发模式为例，development.py文件里的内容
from configs.default import * DEBUG = True  我们设置DEBUG=True，而在production.py中设置DEBUG=False
同时，修改manage.py文件中
os.environ.setdefault(&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;, &amp;quot;settings.py&amp;quot;)  为
env = os.getenv(&#39;DJANGO_CMS&#39;, &#39;development&#39;) os.environ.setdefault(&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;, &amp;quot;configs.{}&amp;quot;.format(env))  这样便实现了通过环境变量控制应用配置。
生产环境中，django 自带的server功能太弱，一般会使用uwsgi或者gunicore之类的server，所以还需要修改wsgi.py文件里配置，方法同上。
HELLO 创建名为django_cms的数据库，之后clone项目，为项目创建虚拟环境并激活，然后进入项目文件夹，依次执行：
 set MYSQL_USER=&amp;lt;your username&amp;gt; set MYSQL_PASSWOR=&amp;lt;your password&amp;gt; python manage.</description>
    </item>
    
    <item>
      <title>从0开始的JS之旅（三）：DOM操作基础</title>
      <link>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%B8%89DOM%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 25 Jan 2018 13:51:37 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%B8%89DOM%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>从0开始的JS之旅（三）  前面讲了一些JS语言的基本语法，但是JS运用最广泛的地方就是前端开发了，肯定免不了操纵DOM节点，这章就讲讲DOM相关的东西
DOM 究竟什么是DOM呢？文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。
 我们从一个最简单的实例开始:
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p class=&amp;quot;cls1&amp;quot; id=&amp;quot;ex1&amp;quot;&amp;gt;这是一句话&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;quot;cls2&amp;quot; id=&amp;quot;ex2&amp;quot;&amp;gt;这是一句不会出现的话&amp;lt;/p&amp;gt; &amp;lt;p class=&amp;quot;cls3&amp;quot; id=&amp;quot;ex3&amp;quot;&amp;gt;这是一句话&amp;lt;/p&amp;gt; &amp;lt;button&amp;gt;点我改变页面&amp;lt;/button&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;script&amp;gt; // 获取元素 var myText1 = document.getElementById(&amp;quot;ex1&amp;quot;) console.log(myText1) // 插入元素 var myBlod = document.createElement(&amp;quot;b&amp;quot;) blod_text = document.createTextNode(&amp;quot;加粗的话&amp;quot;) myBlod.appendChild(blod_text) document.body.appendChild(myBlod) // 删除元素 var myText2 = document.getElementsByClassName(&amp;quot;cls2&amp;quot;)[0] document.body.removeChild(myText2) // 改变元素 var myText3 = document.getElementById(&amp;quot;ex3&amp;quot;) myText3.innerText = &amp;quot;这是一句被改变的话&amp;quot; myText3.style.color = &amp;quot;red&amp;quot; // 动态改变 var myButton = document.getElementsByTagName(&amp;quot;button&amp;quot;)[0] myButton.addEventListener(&amp;quot;click&amp;quot;, function() { myText1.</description>
    </item>
    
    <item>
      <title>从0开始的JS之旅（二）：面向对象编程</title>
      <link>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%BA%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 25 Jan 2018 13:48:56 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%BA%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</guid>
      <description>从0开始的JS之旅（二） 面向对象 类  JavaScript是一种基于原型的语言，它没类的声明语句，比如C+ +或Java中用的。这有时会对习惯使用有类申明语句语言的程序员产生困扰。相反，JavaScript可用方法作类。定义一个类跟定义一个函数一样简单。在下面的例子中，我们定义了一个新类Person。
function Person() {...} var Person = function() {...}  类名采用首字母大写的方式，以此来与函数声明区分开。
对象 对象是类的实例，一般通过new obj的方式创建，下面演示了如何创建一个类的实例。
function Person() {...} var person1 = new Person(); var person2 = new Person();  构造器 构造器指在实例创建时执行的方法，类似于python的init方法。
function Person() { console.log(&amp;quot;init&amp;quot;) }; var person1 = new Person(); // -&amp;gt; init  属性 属性就是 类中包含的变量;每一个对象实例有若干个属性. 为了正确的继承，属性应该被定义在类的原型属性 (函数)中。可以使用 关键字 this调用类中的属性, this是对当前对象的引用。从外部存取(读/写)其属性的语法是: InstanceName.Property。
function Person(name) { this.name = name; console.log(this.name); } var person1 = new Person(&#39;Xiong&#39;) // -&amp;gt; Xiong console.</description>
    </item>
    
    <item>
      <title>从0开始的JS之旅（一）：数据类型，流程语句及函数</title>
      <link>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%B8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 25 Jan 2018 13:39:21 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2018/01/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JS%E4%B9%8B%E6%97%85%E4%B8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B5%81%E7%A8%8B%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%87%BD%E6%95%B0/</guid>
      <description>从0开始的JS之旅（一）  半年多之前学的JS，结果后来一直在写python，现在趁着有些空闲时间，准备重新学习一遍JS，故记录下来，方便自己以后回顾，同时希望能对别人有所帮助
 数据类型    类型 描述 示例     String 字符串，一段文本。 &amp;lsquo;hello world&amp;rsquo;   Number 数字，不需要引号包裹 666   Boolean 布尔型，代表是或否 True/False   Null 代表空， 仅有一种表示方式，即null null   Undefined 未赋值的量 undefined   Array 数组 (1, &amp;ldquo;wow&amp;rdquo;, 0)   Symbol es6引入的新数据类型，类似于function 看这里    基本数据类型的操作 Number 数字  toSting(len) 将数字转化为指定长度的字符串 toFixed(len) 将小数转化为小数点后指定位数的数字 toPrecision(len) 将数字转化为指定精度的数字 valueOf() 返回数字的原始数值  String 字符串  length 返回字符串的字符数目 JS var txt = &amp;quot;yes i do&amp;quot; console.</description>
    </item>
    
  </channel>
</rss>