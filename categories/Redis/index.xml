<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Matrix</title>
    <link>https://xsymphony.github.io/categories/Redis/</link>
    <description>Recent content in Redis on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Wed, 13 Feb 2019 15:08:22 +0800</lastBuildDate>
    
	<atom:link href="https://xsymphony.github.io/categories/Redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis持久化</title>
      <link>https://xsymphony.github.io/post/2019/02/13/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Wed, 13 Feb 2019 15:08:22 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/02/13/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>为什么需要持久化？ redis将数据存储在内存中，一旦redis重启，存储的数据丢失，会导致缓存失效，严重情况下引起缓存雪崩，故需要将存储内容持久化。 持久化的方式？ RDB:通过快照(snapshotting)完成，当符合一定条件时redis会自动将内存中的所有数据生成一份副本并存储</description>
    </item>
    
    <item>
      <title>解读redis协议</title>
      <link>https://xsymphony.github.io/post/2019/01/02/%E8%A7%A3%E8%AF%BBredis%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 02 Jan 2019 17:20:16 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/01/02/%E8%A7%A3%E8%AF%BBredis%E5%8D%8F%E8%AE%AE/</guid>
      <description>前言 Redis作为我们日常使用的key-value数据库，不光操作简单(例如set get delete等指令)，通信协议也简洁明了。 本篇就会剖析Redis的通信协议，并且实现一个简单的Redis客户端。 协议 Redis服务端与客户端使用的基于TCP的文本协议(敲黑板，这里并没有使用效率更</description>
    </item>
    
  </channel>
</rss>