<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on Matrix</title>
    <link>https://xiongsyao.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Thu, 21 Feb 2019 20:35:47 +0800</lastBuildDate>
    
	<atom:link href="https://xiongsyao.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漫谈分布式锁（一）</title>
      <link>https://xiongsyao.github.io/post/2019/02/21/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%80/</link>
      <pubDate>Thu, 21 Feb 2019 20:35:47 +0800</pubDate>
      
      <guid>https://xiongsyao.github.io/post/2019/02/21/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%80/</guid>
      <description>为什么需要分布式锁 之前介绍过Go中的锁，在多个协程(线程)抢占同一资源时，为了防止相互干扰，保持一致性，需要运用到锁机制，得益于线程的共享内存，大部分语言都在标准库中为我们提供了锁。但是在跨进程、跨主机程序协作中，就需要我们自己去实现，我们需要自己为所有进程提供一个&amp;rdquo;共享内存&amp;rdquo;，并在其中实现自己的“锁”。
分布式锁需要实现的功能  获取锁与释放锁的性能要好，足够快； 获取锁必须是原子性的，否则会导致多个进程都持有锁； 具备锁失效机制，当获取到锁的进程(线程)，因为网络问题或者自身异常退出，无法提交释放锁的请求时，锁应当自己清除掉； 同一线程可以多次获取同一把锁，即可重入性； 具备非阻塞锁和阻塞锁特性。当没有获取到锁时，非阻塞锁直接返回锁失败，阻塞锁会使线程继续等待获取锁。  常见的分布式锁实现方案  基于数据库实现; 基于缓存(Redis)实现； 基于zoomkeeper实现; 基于etcd实现。  本篇先介绍基于数据库实现的分布式锁。
基于数据库的分布式锁 利用唯一索引 该实现方式完全依靠数据库唯一索引来实现，当想要获得锁时，即向数据库中插入一条记录，释放锁时就删除这条记录。
创建表:
CREATE TABLE `dbmutex` ( `name` varchar(64) NOT NULL, `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`name`), UNIQUE KEY `uidx_name` (`name`) USING BTREE ) ENGINE=InnoDB DEFAULT CHARSET=utf8  依赖于这张表，实现一个简单的DBMutex类
import MySQLdb class Driver: def __init__(self, address=&amp;quot;localhost&amp;quot;, username=&amp;quot;root&amp;quot;, password=&amp;quot;123456&amp;quot;, dbname=&amp;quot;LOCKER&amp;quot;): self.db = MySQLdb.connect(address, username, password, dbname, charset=&#39;utf8&#39;) self.</description>
    </item>
    
  </channel>
</rss>