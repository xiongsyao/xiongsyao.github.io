<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on Matrix</title>
    <link>https://xsymphony.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CH</language>
    <lastBuildDate>Wed, 27 Feb 2019 15:00:16 +0800</lastBuildDate>
    
	<atom:link href="https://xsymphony.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>漫谈分布式锁（三）</title>
      <link>https://xsymphony.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</link>
      <pubDate>Wed, 27 Feb 2019 15:00:16 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/02/27/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%89/</guid>
      <description>在上一节中，我们利用Redis实现了分布式互斥锁。虽然相较于基于MySQL的解决方案，它已经解决了很多问题，但是仍然有一些不足（不讨论RedLock解放方案）: 非高可用，一旦Redis服务挂了，极大影响锁的使用。 没有正确估计锁的过期时间pexpire时，很容易造成，业务逻辑处理时</description>
    </item>
    
    <item>
      <title>漫谈分布式锁（二）</title>
      <link>https://xsymphony.github.io/post/2019/02/25/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%BA%8C/</link>
      <pubDate>Mon, 25 Feb 2019 17:20:58 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/02/25/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%BA%8C/</guid>
      <description>回顾 在上一节中，我们利用MySQL实现了一个简单的分布式锁，但是，这样实现的分布式锁存在以下缺点： IO时间过长，获取锁与释放锁的过程远不如从内存中获取快。 锁没有失效时间，解锁失败会导致死锁，其他线程无法再获取到锁。 只能是阻塞锁或非阻塞锁。 不可重入，同一线程在没有释放锁之前无法再获</description>
    </item>
    
    <item>
      <title>漫谈分布式锁（一）</title>
      <link>https://xsymphony.github.io/post/2019/02/21/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%80/</link>
      <pubDate>Thu, 21 Feb 2019 20:35:47 +0800</pubDate>
      
      <guid>https://xsymphony.github.io/post/2019/02/21/%E6%BC%AB%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%80/</guid>
      <description>为什么需要分布式锁 之前介绍过Go中的锁，在多个协程(线程)抢占同一资源时，为了防止相互干扰，保持一致性，需要运用到锁机制，得益于线程的共享内存，大部分语言都在标准库中为我们提供了锁。但是在跨进程、跨主机程序协作中，就需要我们自己去实现，我们需要自己为所有进程提供一个&amp;quot;共</description>
    </item>
    
  </channel>
</rss>